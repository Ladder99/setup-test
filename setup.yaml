# client setup

client:
  name: Example # eg company name - not used yet
  timezone: America/Chicago # used by autoprune, adapter jobboss driver, and meter availability.js

# the Ladder99 Adapter service reads this section to know what devices to poll/subscribe to.
# each device driver polls or subscribes to data from a device, then sends the
# data to the Agent via SHDR (a simple key-value text format).
# the Agent then fits that data into an XML structure as defined by the corresponding
# agent.xml and agent.cfg files.
adapter:
  devices:
    # the host device polls the host os/cpu for load, temperature, disk for free space, etc.
    - id: host # must match id in agent.xml
      name: Host # this must match name in agent.cfg and agent.xml
      # see also device alias in the relay section.

      # each device has one or more "sources", which use drivers that feed data to
      # a key-value cache - when a key's value changes, the cache sends the new value
      # to the Agent via SHDR.
      sources:
        # the host device driver defines a set of cache outputs in an outputs.yaml file.
        # these map from the cache keys to the SHDR keys.
        # it also defines a set of cache inputs in an inputs.yaml file.
        # the driver itself is a node.js module that polls the host os data.
        - module: host # module defines inputs and outputs with yaml files
          driver: host # adapter plugin - manages protocol and payload
      # each device the adapter connects to has its own tcp port to an agent,
      # and the agent is configured to listen to that port in agent.cfg.
      outputs:
        agent:
          host: adapter # must match agent.cfg value. 'adapter' here refers to the adapter Docker service.
          port: 7890 # must match agent.cfg value
